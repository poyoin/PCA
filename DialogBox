import wx
import Functions as Func
import CatClass
import cPickle as pickle
import TIPPGen as TIPP
import dask.array as da
import numpy as np
from os import path as pt #split filepaths
import WindowConstructor as Cons

import logging
logging.basicConfig() #What this does is imports the same logging module as the library does
# and it sets up a configuration application wide that the pluginâ€™s logging import can use to
# write messages properly.


import LayoutAlg



class PCAPlugin(CatClass.ISpectralPlugin):
    def Run(self,FilePath,FileName,CurrentProject,WorkFolder,UserPref):
#        self.Metadata = TIPP.LoadMetadata(FilePath[0])
#        print self.Metadata

        # 1: self.inputs
        self.FilePath = FilePath



        # 2: Warning Dialogs
        # Functions.WarningDialog(message, title) - all strings
        ImageLst = []
        RefLst = []
        RefFileNameLst = []
        print "stamp 1"
        for i in range(len(FilePath)):
            if pt.split(pt.split(FilePath[i])[0])[1] == "Reference Samples":
                RefLst.append(FilePath[i])
                RefFileNameLst.append(pt.splitext(FileName[i])[0])
            else:
                ImageLst.append(FilePath[i])
                self.FileName = FileName[i]
        print "stamp 2"
        if len(ImageLst)!=1:
            Func.WarningDialog("Please select one Sample", "File Error")
        elif pickle.load(open(pt.splitext(ImageLst[0])[0]+"_metadata.pkl", "rb" ))["Image Type"] != "Normalized_HSI":
            Func.WarningDialog("Please select a normalized image", "Metadata Error")
        elif len(RefLst) <= 1:
            Func.WarningDialog("Please select at least two reference samples", "File Error")
        elif len(RefLst) >= pickle.load(open(pt.splitext(ImageLst[0])[0]+"_metadata.pkl", "rb" ))["Shape"][2]/2-1:
            Func.WarningDialog("Please select not more reference samples, than the half of the bands", "File Error")
        else:
            RenameFile = Window.RenameFile(None,wx.ID_ANY,[self.FileName],"_RCA")
            RenameFile.ShowModal()
            if RenameFile.ok == True:
                Running = wx.BusyInfo("Please wait while the files are processed...")
                f = h5py.File(ImageLst[0])
                Image = da.from_array(f["Array"],chunks=(100,100,100))
                ImageMetadata = pickle.load(open(pt.splitext(ImageLst[0])[0]+"_metadata.pkl", "rb" ))
                RefLines = []
                for j in range(len(RefLst)):
                    e = h5py.File(RefLst[j])
                    RefLines.append(da.from_array(e["Array"],chunks=(100,100,100)).compute())
                    e.close()






        # 3: Algorithm






        # 4: save as Array(x,y,weights) as ".TippRCA";; Joan will convert to ".TippPCA"
        # Functions.SaveItem(FilePath, FileName, CurrentProject, Source) - all strings
        #   where:  CurrentProject (String) - Current project folder to extract file from.
        #           Source - String which determines whether it should be saved to database or disk. "Disk" or "Data"



        # 5: Define Class for dialog box
        print "stamp 3"


        class VariableBox(wx.Frame):
            def __init__(self):
                wx.Frame.__init__(self,None,wx.ID_ANY,title="TestWindow")
                print "stamp 4"
                self.BasePanel = wx.Panel(self)
                print "stamp 4.5"
                self.PanelA = Cons.CreateButtonPanel(self.BasePanel,[["TestButton1","TestButton2"],["TestButton3","TestButton4"],["TestButton5","TestButton6"],["TestButton7","TestButton8"]])
                self.PanelB = Cons.CreateSpinnerPanel(self.BasePanel,[["AwesomeOption1","1","m"],["AwesomeOption2","2","km"],["AwesomeOption3","3","ly"]])
                self.PanelC = wx.TextCtrl(self.BasePanel,style=wx.TE_MULTILINE|wx.TE_DONTWRAP)
                print "stamp 5"
                Layout = [["A","A","C","C","C"],
                          ["A","A","C","C","C"],
                          ["A","A","C","C","C"],
                          ["B","B","C","C","C"],
                          ["B","B","C","C","C"]]
                print "stamp 6"
                PanelList = {"A":self.PanelA,"B":self.PanelB,"C":self.PanelC}
                print "stamp 7"
                CommandList,PanelSize = [['V_N', 'A.B', [2, 1]], ['H_N', 'AB.C', [1, 2]]],[3, 3]
                # PCLAlgorithm.LayoutCommand(Layout)
                print "stamp 8"
                self.MainPanel = Cons.PanelCustomLayout(self.BasePanel,PanelList,CommandList,PanelSize)
                self.Fit()
#                self.Show(True)


        ClassInstance = VariableBox()
        ClassInstance.Show()



            # Click: Functions.KeyCodeNumber(event)
            #       Keycode table: http://www.wxpython.org/docs/api/wx.KeyEvent-class.html




       
